ceiling(thetasDF[i,dim(thetasDF)[2]-1])
)
centersDF[i,]= centers
}
#smooth= seq(-1,8,.01)
#rollapply(thetas,FUN= function(x){x[2]-x[1]},width=2,align='right')
GaussDF= cbind.data.frame(mu=c(4,1,4,4),sig=c(1.5,2.5,1,3))
p= list()
for(i in 1:dim(GaussDF)[1]){
print(paste(i))
thetas= as.numeric(thetasDF[i,])
mu= GaussDF$mu[i]; sig= GaussDF$sig[i]
bars= rollapply(thetas,FUN= function(x){pnorm(mean=mu,sd=sig,x[2])-pnorm(mean=mu,sd=sig,x[1])},
width=2,align='right')
# curve(dnorm(x,mu,sig),xlim=c(-1,8))
# barplot(x=thetas,y=bars)
p[[i]] <- ggplot()+
geom_function(fun= dnorm,args=list(mean=mu,sd=sig),xlim=c(-1,10))+
geom_bar(aes(x=centersDF[i,],y=bars),stat='identity',fill='skyblue')
}
p[[1]] / p[[2]] / p[[3]] / p[[4]]
centersDF
i=1
print(paste(i))
thetas= as.numeric(thetasDF[i,])
mu= GaussDF$mu[i]; sig= GaussDF$sig[i]
bars= rollapply(thetas,FUN= function(x){pnorm(mean=mu,sd=sig,x[2])-pnorm(mean=mu,sd=sig,x[1])},
width=2,align='right')
# curve(dnorm(x,mu,sig),xlim=c(-1,8))
# barplot(x=thetas,y=bars)
p[[i]] <- ggplot()+
geom_function(fun= dnorm,args=list(mean=mu,sd=sig),xlim=c(-1,10))+
geom_bar(aes(x=centersDF[i,],y=bars),stat='identity',fill='skyblue')
p[[i]]
i=2
print(paste(i))
thetas= as.numeric(thetasDF[i,])
mu= GaussDF$mu[i]; sig= GaussDF$sig[i]
bars= rollapply(thetas,FUN= function(x){pnorm(mean=mu,sd=sig,x[2])-pnorm(mean=mu,sd=sig,x[1])},
width=2,align='right')
# curve(dnorm(x,mu,sig),xlim=c(-1,8))
# barplot(x=thetas,y=bars)
p[[i]] <- ggplot()+
geom_function(fun= dnorm,args=list(mean=mu,sd=sig),xlim=c(-1,10))+
geom_bar(aes(x=centersDF[i,],y=bars),stat='identity',fill='skyblue')
p[[i]]
p[[1]] / p[[2]]
p
GaussDF= cbind.data.frame(mu=c(4,1,4,4),sig=c(1.5,2.5,1,3))
p= list()
for(i in 1:dim(GaussDF)[1]){
print(paste(i))
thetas= as.numeric(thetasDF[i,])
mu= GaussDF$mu[i]; sig= GaussDF$sig[i]
bars= rollapply(thetas,FUN= function(x){pnorm(mean=mu,sd=sig,x[2])-pnorm(mean=mu,sd=sig,x[1])},
width=2,align='right')
# curve(dnorm(x,mu,sig),xlim=c(-1,8))
# barplot(x=thetas,y=bars)
p[[i]] <- ggplot()+
geom_bar(aes(x=centersDF[i,],y=bars),stat='identity',fill='skyblue')+
geom_function(fun= dnorm,args=list(mean=mu,sd=sig),xlim=c(-1,10))
}
p
rm(list=ls())
graphics.off()
cat('\014')
library('zoo')
library('tidyverse')
library('patchwork')
thetasDF= rbind.data.frame(
c(-Inf,seq(1.5,6.5,1),Inf),
c(-Inf,seq(1.5,6.5,1),Inf),
c(-Inf,1.5,3.1,3.7,4.3,4.9,6.5,Inf),
c(-Inf,1.5,2.25,3,5,5.75,6.5,Inf))
colnames(thetasDF)= 0:7
centersDF= matrix(NA,nrow=dim(thetasDF)[1],ncol=dim(thetasDF)[2]-1)
#get the "centers" between the cutoffs
for(i in 1:dim(thetasDF)[1]){
centers= c(1,
rollapply(as.numeric(thetasDF[i,2:(length(thetasDF[i,])-1)]), FUN= mean, width=2),
ceiling(thetasDF[i,dim(thetasDF)[2]-1])
)
centersDF[i,]= centers
}
#smooth= seq(-1,8,.01)
#rollapply(thetas,FUN= function(x){x[2]-x[1]},width=2,align='right')
GaussDF= cbind.data.frame(mu=c(4,1,4,4),sig=c(1.5,2.5,1,3))
p= list()
i=1
print(paste(i))
thetas= as.numeric(thetasDF[i,])
mu= GaussDF$mu[i]; sig= GaussDF$sig[i]
bars= rollapply(thetas,FUN= function(x){pnorm(mean=mu,sd=sig,x[2])-pnorm(mean=mu,sd=sig,x[1])},
width=2,align='right')
# curve(dnorm(x,mu,sig),xlim=c(-1,8))
# barplot(x=thetas,y=bars)
p[[i]] <- ggplot()+
geom_bar(aes(x=centersDF[i,],y=bars),stat='identity',fill='skyblue')+
geom_function(fun= dnorm,args=list(mean=mu,sd=sig),xlim=c(-1,10))
p[[1]]
i=2
print(paste(i))
thetas= as.numeric(thetasDF[i,])
mu= GaussDF$mu[i]; sig= GaussDF$sig[i]
bars= rollapply(thetas,FUN= function(x){pnorm(mean=mu,sd=sig,x[2])-pnorm(mean=mu,sd=sig,x[1])},
width=2,align='right')
# curve(dnorm(x,mu,sig),xlim=c(-1,8))
# barplot(x=thetas,y=bars)
p[[i]] <- ggplot()+
geom_bar(aes(x=centersDF[i,],y=bars),stat='identity',fill='skyblue')+
geom_function(fun= dnorm,args=list(mean=mu,sd=sig),xlim=c(-1,10))
p[[2]]
p[[1]] / p[[2]]
co=1:5
l= list()
for(i in 1:length(co)){
l[[i]]= co[i]
}
l
l[[1]]
l[[3]]
rm(list=ls())
thetasDF= rbind.data.frame(1:5,2:6,3:7,4:8)
thetasDF
centers= rbind.data.frame(seq(1.5,4.5,1),seq(2.5,5.5,1),seq(4.5,6.5,1),seq(4.5,7.5,1))
centers= rbind.data.frame(seq(1.5,4.5,1),seq(2.5,5.5,1),seq(3.5,6.5,1),seq(4.5,7.5,1))
centers
rm(list=ls())
GaussDF= cbind.data.frame(mu=c(4,1,4,4),sig=c(1.5,2.5,1,3))
thetasDF= rbind.data.frame(1:5,2:6,3:7,4:8)
centers= rbind.data.frame(seq(1.5,4.5,1),seq(2.5,5.5,1),seq(3.5,6.5,1),seq(4.5,7.5,1))
p= list()
for(i in 1:dim(GaussDF)[1]){
print(paste(i))
thetas= as.numeric(thetasDF[i,])
mu= GaussDF$mu[i]; sig= GaussDF$sig[i]
bars= rollapply(thetas,FUN= function(x){pnorm(mean=mu,sd=sig,x[2])-pnorm(mean=mu,sd=sig,x[1])},
width=2,align='right')
p[[i]] <- ggplot()+
geom_bar(aes(x=centersDF[i,],y=bars),stat='identity',fill='skyblue')+
geom_function(fun= dnorm,args=list(mean=mu,sd=sig),xlim=c(-1,10))
}
p[[1]] / p[[2]] / p[[3]] / p[[4]]
rm(list=ls())
GaussDF= cbind.data.frame(mu=c(4,1,4,4),sig=c(1.5,2.5,1,3))
thetasDF= rbind.data.frame(1:5,2:6,3:7,4:8)
centersDF= rbind.data.frame(seq(1.5,4.5,1),seq(2.5,5.5,1),seq(3.5,6.5,1),seq(4.5,7.5,1))
p= list()
for(i in 1:dim(GaussDF)[1]){
print(paste(i))
thetas= as.numeric(thetasDF[i,])
mu= GaussDF$mu[i]; sig= GaussDF$sig[i]
bars= rollapply(thetas,FUN= function(x){pnorm(mean=mu,sd=sig,x[2])-pnorm(mean=mu,sd=sig,x[1])},
width=2,align='right')
p[[i]] <- ggplot()+
geom_bar(aes(x=centersDF[i,],y=bars),stat='identity',fill='skyblue')+
geom_function(fun= dnorm,args=list(mean=mu,sd=sig),xlim=c(-1,10))
}
p[[1]] / p[[2]] / p[[3]] / p[[4]]
#######################
rm(list=ls())
GaussDF= cbind.data.frame(mu=c(4,1,4,4),sig=c(1.5,2.5,1,3))
thetasDF= rbind.data.frame(1:5,2:6,3:7,4:8)
centersDF= rbind.data.frame(seq(1.5,4.5,1),seq(2.5,5.5,1),seq(3.5,6.5,1),seq(4.5,7.5,1))
p= list()
i=1
print(paste(i))
thetas= as.numeric(thetasDF[i,])
mu= GaussDF$mu[i]; sig= GaussDF$sig[i]
bars= rollapply(thetas,FUN= function(x){pnorm(mean=mu,sd=sig,x[2])-pnorm(mean=mu,sd=sig,x[1])},
width=2,align='right')
p[[i]] <- ggplot()+
geom_bar(aes(x=centersDF[i,],y=bars),stat='identity',fill='skyblue')+
geom_function(fun= dnorm,args=list(mean=mu,sd=sig),xlim=c(-1,10))
rm(list=ls())
GaussDF= cbind.data.frame(mu=c(4,1,4,4),sig=c(1.5,2.5,1,3))
thetasDF= rbind.data.frame(1:5,2:6,3:7,4:8)
centersDF= rbind.data.frame(seq(1.5,4.5,1),seq(2.5,5.5,1),seq(3.5,6.5,1),seq(4.5,7.5,1))
p= list()
for(i in 1:dim(GaussDF)[1]){
print(paste(i))
thetas= as.numeric(thetasDF[i,])
mu= GaussDF$mu[i]; sig= GaussDF$sig[i]
bars= rollapply(thetas,FUN= function(x){pnorm(mean=mu,sd=sig,x[2])-pnorm(mean=mu,sd=sig,x[1])},
width=2,align='right')
p[[i]] <- ggplot()+
geom_bar(aes(x=centersDF[i,],y=bars),stat='identity',fill='skyblue')+
geom_function(fun= dnorm,args=list(mean=mu,sd=sig),xlim=c(-1,10))
}
#######################
library('patchwork')
library('patchwork')
rm(list=ls())
GaussDF= cbind.data.frame(mu=c(4,1,4,4),sig=c(1.5,2.5,1,3))
thetasDF= rbind.data.frame(1:5,2:6,3:7,4:8)
centersDF= rbind.data.frame(seq(1.5,4.5,1),seq(2.5,5.5,1),seq(3.5,6.5,1),seq(4.5,7.5,1))
p= list()
for(i in 1:dim(GaussDF)[1]){
print(paste(i))
thetas= as.numeric(thetasDF[i,])
mu= GaussDF$mu[i]; sig= GaussDF$sig[i]
bars= rollapply(thetas,FUN= function(x){pnorm(mean=mu,sd=sig,x[2])-pnorm(mean=mu,sd=sig,x[1])},
width=2,align='right')
p[[i]] <- ggplot()+
geom_bar(aes(x=centersDF[i,],y=bars),stat='identity',fill='skyblue')+
geom_function(fun= dnorm,args=list(mean=mu,sd=sig),xlim=c(-1,10))
}
p[[1]] / p[[2]] / p[[3]] / p[[4]]
library('patchwork')
rm(list=ls())
GaussDF= cbind.data.frame(mu=c(4,1,4,4),sig=c(1.5,2.5,1,3))
thetasDF= rbind.data.frame(1:5,2:6,3:7,4:8)
centersDF= rbind.data.frame(seq(1.5,4.5,1),seq(2.5,5.5,1),seq(3.5,6.5,1),seq(4.5,7.5,1))
p= list()
for(i in 1:dim(GaussDF)[1]){
print(paste(i))
thetas= as.numeric(thetasDF[i,])
mu= GaussDF$mu[i]; sig= GaussDF$sig[i]
bars= rollapply(thetas,FUN= function(x){pnorm(mean=mu,sd=sig,x[2])-pnorm(mean=mu,sd=sig,x[1])},
width=2,align='right')
p[[i]] <- ggplot()+
geom_bar(aes(x=centersDF[i,],y=bars),stat='identity',fill='skyblue')+
geom_function(fun= dnorm,args=list(mean=mu,sd=sig),xlim=c(-1,10))
}
p[[1]]
p
ggplot()+
geom_bar(aes(x=centersDF[i,],y=bars),stat='identity',fill='skyblue')+
geom_function(fun= dnorm,args=list(mean=mu,sd=sig),xlim=c(-1,10))
ggplot()+
geom_bar(aes(x=centersDF[i,],y=bars),stat='identity',fill='skyblue')
centersDF[i,]
ars
bars
centersDF[i,]
ggplot()+
geom_bar(aes(x=centersDF[i,],y=bars),stat='identity',fill='skyblue')
centersDF[i,]
bars
ggplot()+
geom_bar(aes(x=as.numeric(centersDF[i,]),y=bars),stat='identity',fill='skyblue')+
geom_function(fun= dnorm,args=list(mean=mu,sd=sig),xlim=c(-1,10))
library('patchwork')
rm(list=ls())
GaussDF= cbind.data.frame(mu=c(4,1,4,4),sig=c(1.5,2.5,1,3))
thetasDF= rbind.data.frame(1:5,2:6,3:7,4:8)
centersDF= rbind.data.frame(seq(1.5,4.5,1),seq(2.5,5.5,1),seq(3.5,6.5,1),seq(4.5,7.5,1))
p= list()
for(i in 1:dim(GaussDF)[1]){
print(paste(i))
thetas= as.numeric(thetasDF[i,])
mu= GaussDF$mu[i]; sig= GaussDF$sig[i]
bars= rollapply(thetas,FUN= function(x){pnorm(mean=mu,sd=sig,x[2])-pnorm(mean=mu,sd=sig,x[1])},
width=2,align='right')
p[[i]] <- ggplot()+
geom_bar(aes(x=as.numeric(centersDF[i,]),y=bars),stat='identity',fill='skyblue')+
geom_function(fun= dnorm,args=list(mean=mu,sd=sig),xlim=c(-1,10))
}
p[[1]] / p[[2]] / p[[3]] / p[[4]]
library('patchwork')
rm(list=ls())
GaussDF= cbind.data.frame(mu=c(4,1,4,4),sig=c(1.5,2.5,1,3))
thetasDF= rbind.data.frame(1:5,2:6,3:7,4:8)
centersDF= rbind.data.frame(seq(1.5,4.5,1),seq(2.5,5.5,1),seq(3.5,6.5,1),seq(4.5,7.5,1))
p= list()
for(i in 1:dim(GaussDF)[1]){
print(paste(i))
thetas= as.numeric(thetasDF[i,])
mu= GaussDF$mu[i]; sig= GaussDF$sig[i]
bars= rollapply(thetas,FUN= function(x){pnorm(mean=mu,sd=sig,x[2])-pnorm(mean=mu,sd=sig,x[1])},
width=2,align='right')
p[[i]] <- ggplot()+
geom_bar(aes(x=as.numeric(centersDF[i,]),y=bars),stat='identity',fill='skyblue')+
geom_function(fun= dnorm,args=list(mean=mu,sd=sig),xlim=c(-1,10))+
coord_cartesian(ylim=c(0,0.4))
}
p[[1]] / p[[2]] / p[[3]] / p[[4]]
p[[1]]
p[[2]]
centersDF
library('patchwork')
rm(list=ls())
GaussDF= cbind.data.frame(mu=c(4,1,4,4),sig=c(1.5,2.5,1,3))
thetasDF= rbind.data.frame(1:5,2:6,3:7,4:8)
centersDF= rbind.data.frame(seq(1.5,4.5,1),seq(2.5,5.5,1),seq(3.5,6.5,1),seq(4.5,7.5,1))
p= list()
i=1
print(paste(i))
thetas= as.numeric(thetasDF[i,])
mu= GaussDF$mu[i]; sig= GaussDF$sig[i]
bars= rollapply(thetas,FUN= function(x){pnorm(mean=mu,sd=sig,x[2])-pnorm(mean=mu,sd=sig,x[1])},
width=2,align='right')
ggplot()+
geom_bar(aes(x=as.numeric(centersDF[i,]),y=bars),stat='identity',fill='skyblue')+
geom_function(fun= dnorm,args=list(mean=mu,sd=sig),xlim=c(-1,10))+
coord_cartesian(ylim=c(0,0.4))
print(paste(i))
thetas= as.numeric(thetasDF[i,])
mu= GaussDF$mu[i]; sig= GaussDF$sig[i]
bars= rollapply(thetas,FUN= function(x){pnorm(mean=mu,sd=sig,x[2])-pnorm(mean=mu,sd=sig,x[1])},
width=2,align='right')
p[[i]] <- ggplot()+
geom_bar(aes(x=as.numeric(centersDF[i,]),y=bars),stat='identity',fill='skyblue')+
geom_function(fun= dnorm,args=list(mean=mu,sd=sig),xlim=c(-1,10))+
coord_cartesian(ylim=c(0,0.4))
p[[i]]
i=2
print(paste(i))
thetas= as.numeric(thetasDF[i,])
mu= GaussDF$mu[i]; sig= GaussDF$sig[i]
bars= rollapply(thetas,FUN= function(x){pnorm(mean=mu,sd=sig,x[2])-pnorm(mean=mu,sd=sig,x[1])},
width=2,align='right')
p[[i]] <- ggplot()+
geom_bar(aes(x=as.numeric(centersDF[i,]),y=bars),stat='identity',fill='skyblue')+
geom_function(fun= dnorm,args=list(mean=mu,sd=sig),xlim=c(-1,10))+
coord_cartesian(ylim=c(0,0.4))
p[[i]]
library('patchwork')
rm(list=ls())
GaussDF= cbind.data.frame(mu=c(4,1,4,4),sig=c(1.5,2.5,1,3))
thetasDF= rbind.data.frame(1:5,2:6,3:7,4:8)
centersDF= rbind.data.frame(seq(1.5,4.5,1),seq(2.5,5.5,1),seq(3.5,6.5,1),seq(4.5,7.5,1))
p= list()
for(i in 1:dim(GaussDF)[1]){
print(paste(i))
thetas= as.numeric(thetasDF[i,])
mu= GaussDF$mu[i]; sig= GaussDF$sig[i]
bars= rollapply(thetas,FUN= function(x){pnorm(mean=mu,sd=sig,x[2])-pnorm(mean=mu,sd=sig,x[1])},
width=2,align='right')
p[[i]] <- ggplot()+
geom_bar(aes(x=as.numeric(centersDF[i,]),y=bars),stat='identity',fill='skyblue')+
geom_function(fun= dnorm,args=list(mean=mu,sd=sig),xlim=c(-1,10))+
coord_cartesian(ylim=c(0,0.4))
}
p
p[[1]] / p[[2]] / p[[3]] / p[[4]]
rm(list=ls())
GaussDF= cbind.data.frame(mu=c(4,1,4,4),sig=c(1.5,2.5,1,3))
thetasDF= rbind.data.frame(1:5,2:6,3:7,4:8)
centersDF= rbind.data.frame(seq(1.5,4.5,1),seq(2.5,5.5,1),seq(3.5,6.5,1),seq(4.5,7.5,1))
p= list()
for(i in 1:dim(GaussDF)[1]){
print(paste(i))
thetas= as.numeric(thetasDF[i,])
mu= GaussDF$mu[i]; sig= GaussDF$sig[i]
bars= rollapply(thetas,FUN= function(x){pnorm(mean=mu,sd=sig,x[2])-pnorm(mean=mu,sd=sig,x[1])},
width=2,align='right')
p= list(p, ggplot()+
geom_bar(aes(x=as.numeric(centersDF[i,]),y=bars),stat='identity',fill='skyblue')+
geom_function(fun= dnorm,args=list(mean=mu,sd=sig),xlim=c(-1,10))+
coord_cartesian(ylim=c(0,0.4)) )
}
p
library('patchwork')
rm(list=ls())
GaussDF= cbind.data.frame(mu=c(4,1,4,4),sig=c(1.5,2.5,1,3))
thetasDF= rbind.data.frame(1:5,2:6,3:7,4:8)
centersDF= rbind.data.frame(seq(1.5,4.5,1),seq(2.5,5.5,1),seq(3.5,6.5,1),seq(4.5,7.5,1))
p= list()
for(i in 1:dim(GaussDF)[1]){
print(paste(i))
thetas= as.numeric(thetasDF[i,])
mu= GaussDF$mu[i]; sig= GaussDF$sig[i]
bars= rollapply(thetas,FUN= function(x){pnorm(mean=mu,sd=sig,x[2])-pnorm(mean=mu,sd=sig,x[1])},
width=2,align='right')
p[[i]][1] <- ggplot()+
geom_bar(aes(x=as.numeric(centersDF[i,]),y=bars),stat='identity',fill='skyblue')+
geom_function(fun= dnorm,args=list(mean=mu,sd=sig),xlim=c(-1,10))+
coord_cartesian(ylim=c(0,0.4))
}
knitr::opts_chunk$set(echo = TRUE)
library('reticulate')   #allows using Python
use_python('C:/Users/wrtlb/AppData/Local/Programs/Python/Python311/python.exe')  # .Rprofile in Documents
reticulate::repl_python()
import graphviz
dot_data= tree.export_graphviz(DTm, out_file=None)
dot_data= export_graphviz(DTm, out_file=None)
# create a new environment
import pandas as pd
MCMCcoefs_DF_HTsex_age= pd.read_csv('G:/My Drive/20230815_GlobBurdDisease/20230915_MCMCcoefs_HTsex_age.csv')
# Engineer features
MCMCcoefs_DF_HTsex_age['b2_ind']= ((MCMCcoefs_DF_HTsex_age['b2_median'])<0).astype(int)
#indicator describing if there is decline in death rate
MCMCcoefs_DF_HTsex_age= MCMCcoefs_DF_HTsex_age.drop(columns=['measure','b0_median','b1_median','b2_median','t_inflec_median'])
MCMCcoefs_DF_HTsex_age= pd.get_dummies(MCMCcoefs_DF_HTsex_age)
MCMCcoefs_DF_HTsex_age.head()
MCMCcoefs_DF_HTsex_age.dtypes
from sklearn.model_selection import train_test_split
X= MCMCcoefs_DF_HTsex_age.drop(columns=['b2_ind'])
y= MCMCcoefs_DF_HTsex_age['b2_ind']
X_train, X_test, y_train, y_test= train_test_split(X,y,test_size=0.3,stratify=y,random_state=20230919)
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
y_train.value_counts()
y_train.value_counts()[1]/y_train.value_counts().sum() #positive ratio in input
DTm= DecisionTreeClassifier(max_depth=5)  #decision tree model
DTm.fit(X_train,y_train)
DTm.score(X_test,y_test)
y_pred= DTm.predict(X_test)
confusion_matrix(y_test,y_pred)
plot_tree(DTm)
plt.show()
#X_train.head(2)
X_train.shape
X_train['cause_Tuberculosis'].value_counts()
X_train.columns[3]
import graphviz
dot_data= tree.export_graphviz(DTm, out_file=None)
dot_data= export_graphviz(DTm, out_file=None)
dot_data= export_graphviz(DTm, out_file=None)
import graphviz
from sklearn.tree import export_graphviz
dot_data= export_graphviz(DTm, out_file=None)
import graphviz
from sklearn.tree import export_graphviz
dot_data= export_graphviz(DTm, out_file=None)
graph= graphviz.Source(dot_data)
graph.render("HT death decline")
quit
knitr::opts_chunk$set(echo = TRUE)
library('reticulate')   #allows using Python
use_python('C:/Users/wrtlb/AppData/Local/Programs/Python/Python311/python.exe')  # .Rprofile in Documents
reticulate::repl_python()
# create a new environment
import pandas as pd
MCMCcoefs_DF_HTsex_age= pd.read_csv('G:/My Drive/20230815_GlobBurdDisease/20230915_MCMCcoefs_HTsex_age.csv')
# Engineer features
MCMCcoefs_DF_HTsex_age['b2_ind']= ((MCMCcoefs_DF_HTsex_age['b2_median'])<0).astype(int)
#indicator describing if there is decline in death rate
MCMCcoefs_DF_HTsex_age= MCMCcoefs_DF_HTsex_age.drop(columns=['measure','b0_median','b1_median','b2_median','t_inflec_median'])
MCMCcoefs_DF_HTsex_age= pd.get_dummies(MCMCcoefs_DF_HTsex_age)
MCMCcoefs_DF_HTsex_age.head()
MCMCcoefs_DF_HTsex_age.dtypes
from sklearn.model_selection import train_test_split
X= MCMCcoefs_DF_HTsex_age.drop(columns=['b2_ind'])
y= MCMCcoefs_DF_HTsex_age['b2_ind']
X_train, X_test, y_train, y_test= train_test_split(X,y,test_size=0.3,stratify=y,random_state=20230919)
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
y_train.value_counts()
y_train.value_counts()[1]/y_train.value_counts().sum() #positive ratio in input
DTm= DecisionTreeClassifier(max_depth=5)  #decision tree model
DTm.fit(X_train,y_train)
DTm.score(X_test,y_test)
y_pred= DTm.predict(X_test)
confusion_matrix(y_test,y_pred)
plot_tree(DTm)
plt.show()
#X_train.head(2)
X_train.shape
X_train['cause_Tuberculosis'].value_counts()
X_train.columns[3]
import graphviz
from sklearn.tree import export_graphviz
dot_data= export_graphviz(DTm, out_file=None)
graph= graphviz.Source(dot_data)
graph.render("HT death decline")
import graphviz
from sklearn.tree import export_graphviz
#dot_data= export_graphviz(DTm, out_file=None)
#graph= graphviz.Source(dot_data)
#graph.render("HT death decline")
import graphviz
from sklearn.tree import export_graphviz
dot_data= export_graphviz(DTm, out_file=None)
#graph= graphviz.Source(dot_data)
#graph.render("HT death decline")
import graphviz
from sklearn.tree import export_graphviz
dot_data= export_graphviz(DTm, out_file=None)
graph= graphviz.Source(dot_data)
#graph.render("HT death decline")
import graphviz
from sklearn.tree import export_graphviz
dot_data= export_graphviz(DTm, out_file=None)
graph= graphviz.Source(dot_data)
graph.render("HT death decline")
import graphviz
from sklearn.tree import export_graphviz
dot_data= export_graphviz(DTm, out_file=None)
graph= graphviz.Source(dot_data)
graph
import graphviz
from sklearn.tree import export_graphviz
dot_data= export_graphviz(DTm, out_file=None)
graph= graphviz.Source(dot_data)
graph.render()
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
y_train.value_counts()
y_train.value_counts()[1]/y_train.value_counts().sum() #positive ratio in input
DTm= DecisionTreeClassifier(max_depth=5)  #decision tree model
DTm.fit(X_train,y_train)
DTm.score(X_test,y_test)
y_pred= DTm.predict(X_test)
confusion_matrix(y_test,y_pred)
plot_tree(DTm)
plt.show()
import graphviz
from sklearn.tree import export_graphviz
dot_data= export_graphviz(DTm, out_file=None)
graph= graphviz.Source(dot_data)
graph.render()
# make sure graphviz is installed and added to PATH and the python package is installed
import graphviz
from sklearn.tree import export_graphviz
dot_data= export_graphviz(DTm, out_file=None)
graph= graphviz.Source(dot_data)
graph.render()
